package main

// Code generated by peg -noast -switch -inline -strict -output greedy.go greedy.peg DO NOT EDIT.

import (
	"fmt"
	"sort"
	"strconv"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleGrammar
	ruleRequired
	ruleOptional
	ruleAction0
	ruleAction1
)

var rul3s = [...]string{
	"Unknown",
	"Grammar",
	"Required",
	"Optional",
	"Action0",
	"Action1",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type peg struct {
	Buffer string
	buffer []rune
	rules  [6]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
}

func (p *peg) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *peg) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *peg
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func Pretty(pretty bool) func(*peg) error {
	return func(p *peg) error {
		p.Pretty = pretty
		return nil
	}
}

func (p *peg) Init(options ...func(*peg) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		if matches {
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Grammar <- <(Required Optional?)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2 := position
					if buffer[position] != rune('r') {
						goto l0
					}
					position++
					if buffer[position] != rune('e') {
						goto l0
					}
					position++
					if buffer[position] != rune('q') {
						goto l0
					}
					position++
					if buffer[position] != rune('u') {
						goto l0
					}
					position++
					if buffer[position] != rune('i') {
						goto l0
					}
					position++
					if buffer[position] != rune('r') {
						goto l0
					}
					position++
					if buffer[position] != rune('e') {
						goto l0
					}
					position++
					if buffer[position] != rune('d') {
						goto l0
					}
					position++
					{
						dump("required")
					}
					add(ruleRequired, position2)
				}
				{
					position4, tokenIndex4 := position, tokenIndex
					{
						position6 := position
						if buffer[position] != rune('o') {
							goto l4
						}
						position++
						if buffer[position] != rune('p') {
							goto l4
						}
						position++
						if buffer[position] != rune('t') {
							goto l4
						}
						position++
						if buffer[position] != rune('i') {
							goto l4
						}
						position++
						if buffer[position] != rune('o') {
							goto l4
						}
						position++
						if buffer[position] != rune('n') {
							goto l4
						}
						position++
						if buffer[position] != rune('a') {
							goto l4
						}
						position++
						if buffer[position] != rune('l') {
							goto l4
						}
						position++
						{
							dump("optional")
						}
						add(ruleOptional, position6)
					}
					goto l5
				l4:
					position, tokenIndex = position4, tokenIndex4
				}
			l5:
				add(ruleGrammar, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Required <- <('r' 'e' 'q' 'u' 'i' 'r' 'e' 'd' Action0)> */
		nil,
		/* 2 Optional <- <('o' 'p' 't' 'i' 'o' 'n' 'a' 'l' Action1)> */
		nil,
		/* 4 Action0 <- <{dump("required")}> */
		nil,
		/* 5 Action1 <- <{dump("optional")}> */
		nil,
	}
	p.rules = _rules
	return nil
}
